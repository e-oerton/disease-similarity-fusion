inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity")
allFiles = list.files(path = filePathToSimilarityMatrices, pattern="*.Rda")
for(file in allFiles){
if(sub(".Rda","",file)%in%inputMatrices){
load(paste(filePathToSimilarityMatrices,file,sep = "/"))
}
}
fusedMatrixMinusDO = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"),weights = c(1,1,1,1,1))
library(rmarkdown) #for html output
render("~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Different Feature Vector Sizes/Project Folder 20/Scripts/Building the Disease Map.rmd")
render("~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Different Feature Vector Sizes/Project Folder 20/Scripts/Building the Disease Map 20.rmd")
load(paste(filePathToData,"fusedRandomMatricesDistWeighted.Rda",sep = "/"))
library(plotly) #for graph output
library(rmarkdown) #for html output
library(gplots) #for heatmap
library(RColorBrewer) #for heatmap
library(igraph) #for generating cytoscape graph
library(randomForest)
library(ROCR) #for auc
library(rmarkdown) #for html output
render("~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Different Feature Vector Sizes/Project Folder 20/Scripts/Building the Disease Map 20.rmd")
load(paste(filePathToData,"Random Forest results","cellproAUCRF85Dim.Rda",sep = "/"))
load(paste(filePathToData,"Random Forest results","cellproFPRRF85Dim.Rda",sep = "/"))
load(paste(filePathToData,"Random Forest results","cellproTPRRF85Dim.Rda",sep = "/"))
load(paste(filePathToData,"Random Forest results","anatomicalAUCRF85Dim.Rda",sep = "/"))
load(paste(filePathToData,"Random Forest results","anatomicalFPRRF85Dim.Rda",sep = "/"))
load(paste(filePathToData,"Random Forest results","anatomicalTPRRF85Dim.Rda",sep = "/"))
load(paste(filePathToData,"Random Forest results","cellproAUCRF85DimRandom.Rda",sep = "/"))
library(plotly) #for graph output
library(rmarkdown) #for html output
library(gplots) #for heatmap
library(RColorBrewer) #for heatmap
library(igraph) #for generating cytoscape graph
library(randomForest)
library(ROCR) #for auc
filePathToData = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data"
filePathToSimilarityMatrices = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data/Similarity Matrices"
filePathToScripts = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Scripts"
load(paste(filePathToData,"diseaseDatasetInfo.Rda",sep = "/"))
load(paste(filePathToData,"shareApprovedAndPhaseThreeDrugs.Rda",sep = "/"))
load(paste(filePathToData,"shareApprovedDrugs.Rda",sep = "/"))
source(paste(filePathToScripts,"Perform Similarity Fusion.R",sep = "/"))
source(paste(filePathToScripts,"Functions for Evaluation.R",sep = "/"))
# Load input similarity matrices
inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity")
allFiles = list.files(path = filePathToSimilarityMatrices, pattern="*.Rda")
for(file in allFiles){
if(sub(".Rda","",file)%in%inputMatrices){
load(paste(filePathToSimilarityMatrices,file,sep = "/"))
}
}
fusedMatrixMinusDO = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"),weights = c(1,1,1,1,1))
fusedMatrixMinusDrug = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity"),weights = c(1,1,1,1,1))
fusedMatrix = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"))
load(paste(filePathToData,"fusedRandomMatricesDistWeighted.Rda",sep = "/"))
load(paste(filePathToData,"fusedRandomMatricesNonDrugDistWeighted.Rda",sep = "/"))
load(paste(filePathToData,"fusedRandomMatricesWeightedDistWeighted.Rda",sep = "/"))
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) x[lower.tri(x)]))[1000*0.9999*length(fusedMatrix[lower.tri(fusedMatrix)])]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) x[lower.tri(x)]))[1000*0.99999*length(fusedMatrix[lower.tri(fusedMatrix)])]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
fusedMatrixSig = applySignificanceThreshold(fusedMatrix,1-proportionOfValuesWhichAreSignificantInFullMatrix)
plot(hclust(as.dist(1-fusedMatrixSig)))
getProportionCutOffs = function(similarityMatrix,randomMatrices){
thresh = sort(sapply(randomMatrices,function(x) x[lower.tri(x)]))[1000*0.9999*length(similarityMatrix[lower.tri(similarityMatrix)])]
proportionOfValuesWhichAreSignificant = length(similarityMatrix[lower.tri(similarityMatrix)][which(similarityMatrix[lower.tri(similarityMatrix)]>thresh)])/length(similarityMatrix[lower.tri(similarityMatrix)])
cat(paste0("Proportion of values which are above the significance threshold: ",proportionOfValuesWhichAreSignificant))
#return(applySignificanceThreshold(similarityMatrix,1-proportionOfValuesWhichAreSignificant))
return(proportionOfValuesWhichAreSignificant)
}
#proportionOfValuesWhichAreSignificantMinusDrug = getProportionCutOffs(fusedMatrixMinusDrug,fusedRandomMatricesNonDrug)
#fusedMatrixMinusDrugSig = applySignificanceThreshold(fusedMatrixMinusDrug,1-proportionOfValuesWhichAreSignificantMinusDrug)
proportionOfValuesWhichAreSignificantInFullMatrixWeighted = getProportionCutOffs(fusedMatrixWeighted,fusedRandomMatricesWeighted)
fusedMatrixWeightedSig = applySignificanceThreshold(fusedMatrixWeighted,1-proportionOfValuesWhichAreSignificantInFullMatrixWeighted)
sameDOClass = matrix(nrow = nrow(diseaseDatasetInfo),ncol = nrow(diseaseDatasetInfo))
rownames(sameDOClass) = diseaseDatasetInfo$condition
colnames(sameDOClass) = diseaseDatasetInfo$condition
for(disease1 in rownames(sameDOClass)){
for(disease2 in colnames(sameDOClass)){
if(diseaseDatasetInfo[which(diseaseDatasetInfo$condition==disease1),"disont.toplevel"]==diseaseDatasetInfo[which(diseaseDatasetInfo$condition==disease2),"disont.toplevel"]){
sameDOClass[disease1,disease2] <- 1
} else {
sameDOClass[disease1,disease2] <- 0
}
}
}
diag(sameDOClass) = NA #not that it matters but...
sameDOClassValues = sameDOClass[lower.tri(sameDOClass)]
getNovelLinks = function(similarityValues){
similarityValues[which(sameDOClassValues==1)] <- 0
return(similarityValues)
}
cat(paste("Proportion of links in the significant disease map which are in different top-level classes: ",length(which(getNovelLinks(fusedMatrixSig[lower.tri(fusedMatrixSig)])!=0))/length(which(fusedMatrixSig[lower.tri(fusedMatrixSig)]!=0)))) #This is equivalent to using fusedMatrixSig and a threshold of 0
getProportionThatAreNovelAndOrShareDrugs = function(proportionCutOff = 1-proportionOfValuesWhichAreSignificantInFullMatrix, drugSimilarityInfo = shareApprovedAndPhaseThreeDrugs,verbose = TRUE){
drugSimilarityValues = drugSimilarityInfo[lower.tri(drugSimilarityInfo)]
ontologicalSimilarityCutOff = applySignificanceThreshold(ontologicalSimilarity,proportionCutOff)
phenotypicSimilarityCutOff = applySignificanceThreshold(phenotypicSimilarity,proportionCutOff)
litCoOccurrenceSimilarityCutOff = applySignificanceThreshold(litCoOccurrenceSimilarity,proportionCutOff)
geneticSimilarityCutOff = applySignificanceThreshold(geneticSimilarity,proportionCutOff)
transcriptomicSimilarityCutOff = applySignificanceThreshold(transcriptomicSimilarity,proportionCutOff)
drugSimilarityCutOff = applySignificanceThreshold(drugSimilarity,proportionCutOff)
fusedMatrixMinusDrugCutOff = applySignificanceThreshold(fusedMatrixMinusDrug,proportionCutOff)
fusedMatrixMinusDOCutOff = applySignificanceThreshold(fusedMatrixMinusDO,proportionCutOff)
fusedMatrixCutOff = applySignificanceThreshold(fusedMatrix,proportionCutOff)
allMatricesCutOff = list(ontologicalSimilarityCutOff[lower.tri(ontologicalSimilarityCutOff)], phenotypicSimilarityCutOff[lower.tri(phenotypicSimilarityCutOff)], litCoOccurrenceSimilarityCutOff[lower.tri(litCoOccurrenceSimilarityCutOff)], geneticSimilarityCutOff[lower.tri(geneticSimilarityCutOff)], transcriptomicSimilarityCutOff[lower.tri(transcriptomicSimilarityCutOff)],drugSimilarityCutOff[lower.tri(drugSimilarityCutOff)], fusedMatrixMinusDrugCutOff[lower.tri(fusedMatrixMinusDrugCutOff)], fusedMatrixMinusDOCutOff[lower.tri(fusedMatrixMinusDOCutOff)], fusedMatrixCutOff[lower.tri(fusedMatrixCutOff)])
novelMatricesCutOff = lapply(allMatricesCutOff, function(x) getNovelLinks(x))
meanJaccardScores = sapply(allMatricesCutOff,function(x) mean(drugSimilarityValues[which(x!=0)]))
proportionThatShareDrugs = sapply(allMatricesCutOff,function(x) length(which(drugSimilarityValues[which(x!=0)]!=0))/length(which(x!=0)))
proportionThatAreNovel = sapply(allMatricesCutOff,function(x) length(which(sameDOClassValues[which(x!=0)]==0))/length(which(x!=0)))
meanJaccardScoresNovel = sapply(novelMatricesCutOff,function(x) if(length(x[which(x!=0)])==0) NA else mean(drugSimilarityValues[which(x!=0)]))
proportionThatShareDrugsNovel = sapply(novelMatricesCutOff,function(x) if(length(x[which(x!=0)])==0) NA else length(which(drugSimilarityValues[which(x!=0)]!=0))/length(which(x!=0)))
meanJaccardScoresRandom = vector("numeric",length(fusedRandomMatricesNonDrug[1:1000]))
proportionThatShareDrugsRandom = vector("numeric",length(fusedRandomMatricesNonDrug[1:1000]))
proportionThatAreNovelRandom = vector("numeric",length(fusedRandomMatricesNonDrug[1:1000]))
meanJaccardScoresNovelRandom = vector("numeric",length(fusedRandomMatricesNonDrug[1:1000]))
proportionThatShareDrugsNovelRandom = vector("numeric",length(fusedRandomMatricesNonDrug[1:1000]))
for(i in 1:length(fusedRandomMatricesNonDrug[1:1000])){
aRandomMatrix = applySignificanceThreshold(fusedRandomMatricesNonDrug[[i]],sig = proportionCutOff)
aRandomMatrix = aRandomMatrix[lower.tri(aRandomMatrix)]
tempnovel = getNovelLinks(aRandomMatrix)
meanJaccardScoresRandom[[i]] = mean(drugSimilarityValues[which(aRandomMatrix!=0)])
proportionThatShareDrugsRandom[[i]] = length(which(drugSimilarityValues[which(aRandomMatrix!=0)]!=0))/length(which(aRandomMatrix!=0))
proportionThatAreNovelRandom[[i]] = length(which(sameDOClassValues[which(aRandomMatrix!=0)]==0))/length(which(aRandomMatrix!=0))
if(length(tempnovel[which(tempnovel!=0)])==0){
meanJaccardScoresNovelRandom[[i]] = NA
proportionThatShareDrugsNovelRandom[[i]] = NA
} else {
meanJaccardScoresNovelRandom[[i]] = mean(drugSimilarityValues[which(tempnovel!=0)])
proportionThatShareDrugsNovelRandom[[i]] = length(which(drugSimilarityValues[which(tempnovel!=0)]!=0))/length(which(tempnovel!=0))
}
}
if(verbose){
writeLines(c(#paste("Mean jaccard scores, DO-Transcriptomic kernels (5 individual kernels):",round(mean(meanJaccardScores[1:5]),3)),
#paste("Mean proportion drug sharing, DO-Transcriptomic kernels (5 individual kernels):",round(mean(proportionThatShareDrugs[1:5]),3)),
#paste("Mean jaccard score, kernel created from 5 spaces:",round(meanJaccardScores[7],3)),
#paste("Mean proportion drug sharing, kernel created from 5 spaces:",round(proportionThatShareDrugs[7],3),"/n"),
paste("Mean jaccard score, full disease map:",round(meanJaccardScores[9],3)),
paste("Mean proportion drug sharing, full disease map:",round(proportionThatShareDrugs[9],3),"/n")))
writeLines(c(#paste("Mean jaccard scores, novel links, DO-Transcriptomic kernels (5 individual kernels):",round(mean(meanJaccardScoresNovel[1:5]),3)),
#paste("Mean proportion drug sharing, novel links, DO-Transcriptomic kernels (5 individual kernels):",round(mean(proportionThatShareDrugsNovel[1:5]),3)),
#paste("Mean jaccard score, novel links, kernel created from 5 spaces:",round(meanJaccardScoresNovel[7],3)),
#paste("Mean proportion drug sharing, novel links, kernel created from 5 spaces:",round(proportionThatShareDrugsNovel[7],3)),
paste("Mean jaccard score, novel links, full disease map:",round(meanJaccardScoresNovel[9],3)),
paste("Mean proportion drug sharing, full disease map:",round(proportionThatShareDrugsNovel[9],3))))
}
return(list(c(mean(meanJaccardScoresRandom),meanJaccardScores),c(mean(proportionThatShareDrugsRandom),proportionThatShareDrugs),c(mean(meanJaccardScoresNovelRandom),meanJaccardScoresNovel),c(mean(proportionThatShareDrugsNovelRandom),proportionThatShareDrugsNovel),c(mean(proportionThatAreNovelRandom),proportionThatAreNovel),length(which(fusedMatrixMinusDrugCutOff[lower.tri(fusedMatrixMinusDrugCutOff)]!=0))))
}
getProportionThatAreNovelAndOrShareDrugs(proportionCutOff = 1-proportionOfValuesWhichAreSignificantInFullMatrix)
getProportionThatAreNovelAndOrShareDrugs(proportionCutOff = 1-proportionOfValuesWhichAreSignificantInFullMatrix, drugSimilarityInfo = shareApprovedDrugs)
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) x[lower.tri(x)]))[1000*0.9999*length(fusedMatrix[lower.tri(fusedMatrix)])]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) x[lower.tri(x)]))[1000*0.9999*length(fusedMatrix[lower.tri(fusedMatrix)])]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
fusedMatrixSig = applySignificanceThreshold(fusedMatrix,1-proportionOfValuesWhichAreSignificantInFullMatrix)
sameDOClass = matrix(nrow = nrow(diseaseDatasetInfo),ncol = nrow(diseaseDatasetInfo))
rownames(sameDOClass) = diseaseDatasetInfo$condition
colnames(sameDOClass) = diseaseDatasetInfo$condition
for(disease1 in rownames(sameDOClass)){
for(disease2 in colnames(sameDOClass)){
if(diseaseDatasetInfo[which(diseaseDatasetInfo$condition==disease1),"disont.toplevel"]==diseaseDatasetInfo[which(diseaseDatasetInfo$condition==disease2),"disont.toplevel"]){
sameDOClass[disease1,disease2] <- 1
} else {
sameDOClass[disease1,disease2] <- 0
}
}
}
diag(sameDOClass) = NA #not that it matters but...
sameDOClassValues = sameDOClass[lower.tri(sameDOClass)]
getNovelLinks = function(similarityValues){
similarityValues[which(sameDOClassValues==1)] <- 0
return(similarityValues)
}
cat(paste("Proportion of links in the significant disease map which are in different top-level classes: ",length(which(getNovelLinks(fusedMatrixSig[lower.tri(fusedMatrixSig)])!=0))/length(which(fusedMatrixSig[lower.tri(fusedMatrixSig)]!=0)))) #This is equivalent to using fusedMatrixSig and a threshold of 0
library(plotly) #for graph output
library(rmarkdown) #for html output
library(gplots) #for heatmap
library(RColorBrewer) #for heatmap
library(igraph) #for generating cytoscape graph
library(randomForest)
library(ROCR) #for auc
filePathToDataOriginal = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data"
filePathToData = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Different Feature Vector Sizes/Project Folder 20/Data"
filePathToSimilarityMatrices = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Different Feature Vector Sizes/Project Folder 20/Data/Similarity Matrices"
filePathToScripts = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Scripts"
load(paste(filePathToDataOriginal,"diseaseDatasetInfo.Rda",sep = "/"))
load(paste(filePathToDataOriginal,"shareApprovedAndPhaseThreeDrugs.Rda",sep = "/"))
load(paste(filePathToDataOriginal,"shareApprovedDrugs.Rda",sep = "/"))
source("~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Scripts/Functions for Evaluation.R")
source("~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Different Feature Vector Sizes/Project Folder 20/Scripts/Perform Similarity Fusion 20.R")
# Load input similarity matrices
inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity")
allFiles = list.files(path = filePathToSimilarityMatrices, pattern="*.Rda")
for(file in allFiles){
if(sub(".Rda","",file)%in%inputMatrices){
load(paste(filePathToSimilarityMatrices,file,sep = "/"))
}
}
fusedMatrixMinusDO = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"),weights = c(1,1,1,1,1))
fusedMatrixMinusDrug = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity"),weights = c(1,1,1,1,1))
fusedMatrix = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"))
load(paste(filePathToData,"fusedRandomMatrices.Rda",sep = "/"))
load(paste(filePathToData,"fusedRandomMatricesNonDrug.Rda",sep = "/"))
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) x[lower.tri(x)]))[999*length(fusedMatrix[lower.tri(fusedMatrix)])]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
fusedMatrixSig = applySignificanceThreshold(fusedMatrix,1-proportionOfValuesWhichAreSignificantInFullMatrix)
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) x[lower.tri(x)]))[1000*0.9999*length(fusedMatrix[lower.tri(fusedMatrix)])]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
fusedMatrixSig = applySignificanceThreshold(fusedMatrix,1-proportionOfValuesWhichAreSignificantInFullMatrix)
library(plotly) #for graph output
library(rmarkdown) #for html output
library(gplots) #for heatmap
library(RColorBrewer) #for heatmap
library(igraph) #for generating cytoscape graph
library(randomForest)
library(ROCR) #for auc
filePathToDataOriginal = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data"
filePathToData = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Different Feature Vector Sizes/Project Folder 20/Data"
filePathToSimilarityMatrices = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Different Feature Vector Sizes/Project Folder 20/Data/Similarity Matrices"
filePathToScripts = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Scripts"
load(paste(filePathToDataOriginal,"diseaseDatasetInfo.Rda",sep = "/"))
load(paste(filePathToDataOriginal,"shareApprovedAndPhaseThreeDrugs.Rda",sep = "/"))
load(paste(filePathToDataOriginal,"shareApprovedDrugs.Rda",sep = "/"))
source("~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Scripts/Functions for Evaluation.R")
source("~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Different Feature Vector Sizes/Project Folder 20/Scripts/Perform Similarity Fusion 20.R")
# Load input similarity matrices
inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity")
allFiles = list.files(path = filePathToSimilarityMatrices, pattern="*.Rda")
for(file in allFiles){
if(sub(".Rda","",file)%in%inputMatrices){
load(paste(filePathToSimilarityMatrices,file,sep = "/"))
}
}
fusedMatrixMinusDO = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"),weights = c(1,1,1,1,1))
fusedMatrixMinusDrug = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity"),weights = c(1,1,1,1,1))
fusedMatrix = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"))
allSpaces = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity")
temp = lapply(allSpaces,function(x) get(x))
names(temp) = allSpaces
normalizedMatrixList = normalizeMatrices(temp)
allIndividualKernels = list(ontologicalSimilarity,phenotypicSimilarity,litCoOccurrenceSimilarity,geneticSimilarity,transcriptomicSimilarity,drugSimilarity,fusedMatrix)
View(sapply(allIndividualKernels,function(x)[lower.tri(x)]))
View(sapply(allIndividualKernels,function(x) x[lower.tri(x)]))
View(sapply(normalizedMatrixList,function(x) x[lower.tri(x)]))
View(sapply(allIndividualKernels,function(x) sort(x[lower.tri(x)])))
View(sapply(normalizedMatrixList,function(x) sort(x[lower.tri(x)])))
library(plotly) #for graph output
library(rmarkdown) #for html output
library(gplots) #for heatmap
library(RColorBrewer) #for heatmap
library(igraph) #for generating cytoscape graph
library(randomForest)
library(ROCR) #for auc
filePathToData = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data"
filePathToSimilarityMatrices = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data/Similarity Matrices"
filePathToScripts = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Scripts"
load(paste(filePathToData,"diseaseDatasetInfo.Rda",sep = "/"))
load(paste(filePathToData,"shareApprovedAndPhaseThreeDrugs.Rda",sep = "/"))
load(paste(filePathToData,"shareApprovedDrugs.Rda",sep = "/"))
source(paste(filePathToScripts,"Perform Similarity Fusion.R",sep = "/"))
source(paste(filePathToScripts,"Functions for Evaluation.R",sep = "/"))
# Load input similarity matrices
inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity")
allFiles = list.files(path = filePathToSimilarityMatrices, pattern="*.Rda")
for(file in allFiles){
if(sub(".Rda","",file)%in%inputMatrices){
load(paste(filePathToSimilarityMatrices,file,sep = "/"))
}
}
write.csv(diseaseDatasetInfo,file="~/Desktop/diseaseDatasetInfo.csv")
?write.csv
write.csv(apply(diseaseDatasetInfo,2,as.char),file="~/Desktop/diseaseDatasetInfo.csv")
write.csv(apply(diseaseDatasetInfo,2,function(x) as.char(x)),file="~/Desktop/diseaseDatasetInfo.csv")
write.csv(apply(diseaseDatasetInfo,2,function(x) as.character(x)),file="~/Desktop/diseaseDatasetInfo.csv")
sum(fusedRandomMatrices[[1]][lower.tri(fusedRandomMatrices[[1]])])
load(paste(filePathToData,"fusedRandomMatricesDistWeighted.Rda",sep = "/"))
sum(fusedRandomMatrices[[1]][lower.tri(fusedRandomMatrices[[1]])])
fusedMatrixMinusDO = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"),weights = c(1,1,1,1,1))
fusedMatrixMinusDrug = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity"),weights = c(1,1,1,1,1))
fusedMatrix = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"))
sum(fusedMatrix[lower.tri(fusedMatrix)])
sapply(fusedRandomMatrices,function(x)sum(x[lower.tri(x)]))
allSpaces = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity")
temp = lapply(allSpaces,function(x) get(x))
names(temp) = allSpaces
normalizedMatrixList = normalizeMatrices(temp)
sapply(normalizedMatrixList,function(x)sum(x[lower.tri(x)]))
mean(fusedRandomMatrices[[1]][lower.tri(fusedRandomMatrices[[1]])])
mean(fusedMatrix[lower.tri(fusedMatrix)])
median(fusedRandomMatrices[[1]][lower.tri(fusedRandomMatrices[[1]])])
median(fusedMatrix[lower.tri(fusedMatrix)])
1000*0.9999
1-0.9999
1/1000
1/10000
1000*0.9999*length(fusedMatrix[lower.tri(fusedMatrix)])
1000*length(fusedMatrix[lower.tri(fusedMatrix)])
999.9*length(fusedMatrix[lower.tri(fusedMatrix)])
999*length(fusedMatrix[lower.tri(fusedMatrix)])
3486000-3485651
349/3486000
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) max(x[lower.tri(x)])))[950]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) max(x[lower.tri(x)])))[900]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) max(x[lower.tri(x)])))[850]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) max(x[lower.tri(x)])))[800]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
sapply(fusedRandomMatrices,function(x) tail(sort(x[lower.tri(x)])))
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) max(x[lower.tri(x)])))[850]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) max(x[lower.tri(x)])))[830]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
threshFullMatrix = sort(sapply(fusedRandomMatrices,function(x) x[lower.tri(x)]))[1000*0.9999*length(fusedMatrix[lower.tri(fusedMatrix)])]
proportionOfValuesWhichAreSignificantInFullMatrix = length(fusedMatrix[lower.tri(fusedMatrix)][which(fusedMatrix[lower.tri(fusedMatrix)]>threshFullMatrix)])/length(fusedMatrix[lower.tri(fusedMatrix)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificantInFullMatrix))
geneconverter = read.csv("~/Dropbox/PhD Work/NetWORK/geneconverterensembl.txt",sep = "\t")
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D NetWORK/prescribed_drugs_targets_list_drugnames.Rda")
novelLinksFull = read.csv("~/Desktop/novelLinksFull.csv")[,2:3]
View(novelLinksFull)
countFeaturesPheno = function(dis1,dis2){intersect(names(phenotypelist[[dis1]]),names(phenotypelist[[dis2]]))}
novelLinksFull$pheno <- apply(novelLinksFull,1,function(x) length(countFeaturesPheno(trimws(x[1]),trimws(x[2]))))
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Creating the Similarity Matrices (Private)/Input Data/disgenes.Rda")
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Creating the Similarity Matrices (Private)/Input Data/fulllitsim.Rda")
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Creating the Similarity Matrices (Private)/Input Data/co_occurrence.Rda")
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Creating the Similarity Matrices (Private)/Input Data/doResnik.Rda")
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Creating the Similarity Matrices (Private)/Input Data/drugindicationslist.Rda")
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Creating the Similarity Matrices (Private)/Input Data/synsetlistforphenotypes.Rda")
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Creating the Similarity Matrices (Private)/Input Data/geneExpressionData.Rda")
countFeaturesPheno = function(dis1,dis2){intersect(names(synsetlistforphenotypes[[dis1]]),names(synsetlistforphenotypes[[dis2]]))}
novelLinksFull$pheno <- apply(novelLinksFull,1,function(x) length(countFeaturesPheno(trimws(x[1]),trimws(x[2]))))
countFeaturesLit = function(dis1,dis2){intersect(co_occurrence[[dis1]],co_occurrence[[dis2]])}
novelLinksFull$lit <- apply(novelLinksFull,1,function(x) length(countFeaturesLit(trimws(x[1]),trimws(x[2]))))
countFeaturesDisgene = function(dis1,dis2){intersect(names(disgenes[[dis1]]),names(disgenes[[dis2]]))}
novelLinksFull$disgene <- apply(novelLinksFull,1,function(x) length(countFeaturesDisgene(trimws(x[1]),trimws(x[2]))))
countFeaturesUpreg = function(dis1,dis2){intersect(upregs[[dis1]],upregs[[dis2]])}
countFeaturesDownreg = function(dis1,dis2){intersect(downregs[[dis1]],downregs[[dis2]])}
novelLinksFull$transcriptomic <- apply(novelLinksFull,1,function(x) length(countFeaturesUpreg(trimws(x[1]),trimws(x[2])))+length(countFeaturesDownreg(trimws(x[1]),trimws(x[2]))))
sharedGenes = Reduce(intersect,lapply(geneExpressionData,function(x) x$gene))
geneExpressionData = lapply(geneExpressionData, function(x) x[which(x$gene%in%sharedGenes),])
geneExpressionDataSignificant = lapply(geneExpressionData, function(x) x[which(x$P.Value<0.05&(x$gene!="")),])
topregs = lapply(geneExpressionDataSignificant, function (x) x[order(-abs(x$logFC)),][1:100,])
upregs = lapply(topregs, function (x) unlist(x[which(x$logFC>0),"gene"]))
downregs = lapply(topregs, function (x) unlist(x[which(x$logFC<0),"gene"]))
names(upregs) = sapply(names(geneExpressionData),function(x) diseaseDatasetInfo[which(rownames(diseaseDatasetInfo)==x),"condition"])
names(downregs) = names(upregs)
drugs = sapply(drugindicationslist, function(x) unique(tolower(x[which(x$max_phase_for_ind>3),"pref_name"])))
novelLinksFull$transcriptomic <- apply(novelLinksFull,1,function(x) length(countFeaturesUpreg(trimws(x[1]),trimws(x[2])))+length(countFeaturesDownreg(trimws(x[1]),trimws(x[2]))))
countFeaturesDrug = function(dis1,dis2){intersect(drugs[[dis1]],drugs[[dis2]])}
novelLinksFull$drug <- apply(novelLinksFull,1,function(x) length(countFeaturesDrug(trimws(x[1]),trimws(x[2]))))
write.csv(novelLinksFull,file = "~/Desktop/novelLinksCount.csv")
novelLinksFull = read.csv("~/Desktop/novelLinksFull.csv")[,2:3]
countFeaturesPheno = function(dis1,dis2){intersect(names(synsetlistforphenotypes[[dis1]]),names(synsetlistforphenotypes[[dis2]]))}
novelLinksFull$pheno <- apply(novelLinksFull,1,function(x) length(countFeaturesPheno(trimws(x[1]),trimws(x[2]))))
countFeaturesLit = function(dis1,dis2){intersect(co_occurrence[[dis1]],co_occurrence[[dis2]])}
novelLinksFull$lit <- apply(novelLinksFull,1,function(x) length(countFeaturesLit(trimws(x[1]),trimws(x[2]))))
countFeaturesDisgene = function(dis1,dis2){intersect(names(disgenes[[dis1]]),names(disgenes[[dis2]]))}
novelLinksFull$disgene <- apply(novelLinksFull,1,function(x) length(countFeaturesDisgene(trimws(x[1]),trimws(x[2]))))
countFeaturesUpreg = function(dis1,dis2){intersect(upregs[[dis1]],upregs[[dis2]])}
countFeaturesDownreg = function(dis1,dis2){intersect(downregs[[dis1]],downregs[[dis2]])}
novelLinksFull$transcriptomic <- apply(novelLinksFull,1,function(x) length(countFeaturesUpreg(trimws(x[1]),trimws(x[2])))+length(countFeaturesDownreg(trimws(x[1]),trimws(x[2]))))
countFeaturesDrug = function(dis1,dis2){intersect(drugs[[dis1]],drugs[[dis2]])}
novelLinksFull$drug <- apply(novelLinksFull,1,function(x) length(countFeaturesDrug(trimws(x[1]),trimws(x[2]))))
write.csv(novelLinksFull,file = "~/Desktop/novelLinksCount.csv")
#don't forget to change 'disease by infectious agent' to 'sepsis'
dis1 = "down syndrome"
dis2 = "huntington's disease"
countFeaturesPheno(dis1,dis2)
dis2 = "huntington disease"
countFeaturesPheno(dis1,dis2)
synsetlistforphenotypes[[dis1]]
countFeaturesPheno = function(dis1,dis2){intersect(synsetlistforphenotypes[[dis1]],synsetlistforphenotypes[[dis2]])}
countFeaturesPheno(dis1,dis2)
synsetlistforphenotypes[[dis1]]
synsetlistforphenotypes[[dis2]]
names(synsetlistforphenotypes)
names(synsetlistforphenotypes) = diseaseDatasetInfo$condition
countFeaturesPheno(dis1,dis2)
synsetlistforphenotypes[[dis2]]
names(synsetlistforphenotypes)
dis2 = "huntington's disease"
countFeaturesPheno(dis1,dis2)
countFeaturesLit(dis1,dis2)
countFeaturesDisgene(dis1,dis2))
countFeaturesDisgene(dis1,dis2)
disgenes[[dis1]]
disgenes[[dis2]]
names(co_occurrence) = diseaseDatasetInfo$condition
names(disgenes) = diseaseDatasetInfo$condition
geneconverter[which(geneconverter$Entrez.Gene.ID.supplied.by.NCBI.%in%countFeaturesDisgene(dis1,dis2)),"Approved.Symbol"]
countFeaturesDisgene(dis1,dis2)
countFeaturesUpreg(dis1,dis2)
countFeaturesDownreg(dis1,dis2)
countFeaturesDrug(dis1,dis2)
names(drugs) = diseaseDatasetInfo$condition
countFeaturesPheno = function(dis1,dis2){intersect(synsetlistforphenotypes[[dis1]],synsetlistforphenotypes[[dis2]])}
novelLinksFull$pheno <- apply(novelLinksFull,1,function(x) length(countFeaturesPheno(trimws(x[1]),trimws(x[2]))))
countFeaturesLit = function(dis1,dis2){intersect(co_occurrence[[dis1]],co_occurrence[[dis2]])}
novelLinksFull$lit <- apply(novelLinksFull,1,function(x) length(countFeaturesLit(trimws(x[1]),trimws(x[2]))))
countFeaturesDisgene = function(dis1,dis2){intersect(names(disgenes[[dis1]]),names(disgenes[[dis2]]))}
novelLinksFull$disgene <- apply(novelLinksFull,1,function(x) length(countFeaturesDisgene(trimws(x[1]),trimws(x[2]))))
countFeaturesUpreg = function(dis1,dis2){intersect(upregs[[dis1]],upregs[[dis2]])}
countFeaturesDownreg = function(dis1,dis2){intersect(downregs[[dis1]],downregs[[dis2]])}
novelLinksFull$transcriptomic <- apply(novelLinksFull,1,function(x) length(countFeaturesUpreg(trimws(x[1]),trimws(x[2])))+length(countFeaturesDownreg(trimws(x[1]),trimws(x[2]))))
countFeaturesDrug = function(dis1,dis2){intersect(drugs[[dis1]],drugs[[dis2]])}
novelLinksFull$drug <- apply(novelLinksFull,1,function(x) length(countFeaturesDrug(trimws(x[1]),trimws(x[2]))))
write.csv(novelLinksFull,file = "~/Desktop/novelLinksCount.csv")
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D NetWORK/prescribed_drugs_targets_list_drugnames.Rda")
any(as.character(geneconverter[which(geneconverter$Entrez.Gene.ID.supplied.by.NCBI.%in%countFeaturesDisgene(dis1,dis2)),"Approved.Symbol"])%in%sharedDrugTargets)
sharedDrugTargets = unique(unlist(prescribed_drugs_targets_list_drugnames[[dis1]][which(names(prescribed_drugs_targets_list_drugnames[[dis1]])%in%toupper(countFeaturesDrug(dis1,dis2)))]))
any(as.character(geneconverter[which(geneconverter$Entrez.Gene.ID.supplied.by.NCBI.%in%countFeaturesDisgene(dis1,dis2)),"Approved.Symbol"])%in%sharedDrugTargets)
sharedDrugTargets
dis1 = "cervical squamous cell carcinoma"
dis2 = "chronic hepatitis b (carrier)"
countFeaturesPheno(dis1,dis2)
countFeaturesLit(dis1,dis2)
countFeaturesDisgene(dis1,dis2)
sort(countFeaturesDisgene(dis1,dis2))
library(plotly) #for graph output
library(rmarkdown) #for html output
library(gplots) #for heatmap
library(RColorBrewer) #for heatmap
library(igraph) #for generating cytoscape graph
library(randomForest)
library(ROCR) #for auc
filePathToData = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data"
filePathToSimilarityMatrices = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data/Similarity Matrices"
filePathToScripts = "~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Scripts"
load(paste(filePathToData,"diseaseDatasetInfo.Rda",sep = "/"))
load(paste(filePathToData,"shareApprovedAndPhaseThreeDrugs.Rda",sep = "/"))
load(paste(filePathToData,"shareApprovedDrugs.Rda",sep = "/"))
source(paste(filePathToScripts,"Perform Similarity Fusion.R",sep = "/"))
source(paste(filePathToScripts,"Functions for Evaluation.R",sep = "/"))
# Load input similarity matrices
inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity")
allFiles = list.files(path = filePathToSimilarityMatrices, pattern="*.Rda")
for(file in allFiles){
if(sub(".Rda","",file)%in%inputMatrices){
load(paste(filePathToSimilarityMatrices,file,sep = "/"))
}
}
fusedMatrixMinusDO = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"),weights = c(1,1,1,1,1))
fusedMatrixMinusDrug = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity"),weights = c(1,1,1,1,1))
fusedMatrix = createFusedMatrix(filePathToSimilarityMatrices,inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"))
proportionCutOff = 0.93
drugSimilarityInfo = shareApprovedAndPhaseThreeDrugs
drugSimilarityValues = drugSimilarityInfo[lower.tri(drugSimilarityInfo)]
fusedMatrixCutOff = applySignificanceThreshold(fusedMatrix,proportionCutOff)
x = fusedMatrixCutOff[lower.tri(fusedMatrixCutOff)]
drugSimilarityValues[which(x!=0)]
proportionCutOff = 0.90
proportionCutOff = 0.99
fusedMatrixCutOff = applySignificanceThreshold(fusedMatrix,proportionCutOff)
x = fusedMatrixCutOff[lower.tri(fusedMatrixCutOff)]
drugSimilarityValues[which(x!=0)]
which(drugSimilarityValues[which(x!=0)]!=0)
length(which(drugSimilarityValues[which(x!=0)]!=0))
length(which(x!=0))
mean(drugSimilarityValues[which(x!=0)])
sum(drugSimilarityValues[which(x!=0)])/length(drugSimilarityValues[which(x!=0)])
sum(drugSimilarityValues[which(x!=0)])/length(which(x!=0))
View(diseaseDatasetInfo)
library(rhdf5)
npmi = h5read("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Creating the Similarity Matrices (Private)/Input Data/NPMI_document_level_similiarities.h5",name = "similarity_matrix")
fulllitsim = npmi$block0_values
diag(fulllitsim) = NA
fulllitsim = (fulllitsim-min(fulllitsim,na.rm=TRUE))/(max(fulllitsim,na.rm=TRUE)-min(fulllitsim,na.rm=TRUE))
rownames(fulllitsim) = npmi$block0_items
colnames(fulllitsim) = rownames(fulllitsim)
head(rownames(fulllitsim))
mesh2name = read.csv("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Creating the Similarity Matrices (Private)/Input Data/mesh_to_name.tsv",sep="\t",stringsAsFactors = FALSE)
rownames(fulllitsim) = sapply(rownames(fulllitsim), function(x) mesh2name[which(mesh2name$mesh_id==x),"name"]) #apply the DO name if we have it, else keep the MeSH name
head(rownames(fulllitsim))
dim(fulllitsim)
rownames(fulllitsim)
rownames(fulllitsim)[1:1000]
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Creating the Similarity Matrices (Private)/Input Data/co_occurrence.Rda")
allLitDiseases = sort(unique(unlist(co_occurrence)))
allLitDiseases = sapply(allLitDiseases, function(x) mesh2name[which(mesh2name$mesh_id==x),"name"]) #apply the DO name if we have it, else keep the MeSH name
allLitDiseases[1:1000]
unlist(allLitDiseases)[1:1000]
unname(allLitDiseases)[1:1000]
unname(allLitDiseases)[1:500]
unname(allLitDiseases)[501:1000]
unname(allLitDiseases)[1501:2000]
unname(allLitDiseases)[2501:3000]
unname(allLitDiseases)[3501:000]
unname(allLitDiseases)[3501:4000]
sort(unname(unlist(allLitDiseases)))
setwd("~/Documents/disease-similarity-fusion")
load(paste(filePathToData,"diseaseDatasetInfo.Rda",sep = "/"))
filePathToData = "Data"
load(paste(filePathToData,"diseaseDatasetInfo.Rda",sep = "/"))
# Load drug-sharing data (evaluation matrices based on createDrugSimilarityMatrix.R)
load(paste(filePathToData,"shareApprovedAndPhaseThreeDrugs.Rda",sep = "/"))
load(paste(filePathToData,"shareApprovedDrugs.Rda",sep = "/"))
filePathToSimilarityMatrices = "Data/Similarity Matrices"
filePathToScripts = "Scripts"
source(paste(filePathToScripts,"Perform Similarity Fusion.R",sep = "/"))
source(paste(filePathToScripts,"Functions for Evaluation.R",sep = "/"))
