library(plotly) #for graph output
library(rmarkdown) #for html output
library(gplots) #for heatmap
library(RColorBrewer) #for heatmap
library(igraph) #for generating cytoscape graph
library(randomForest)
library(ROCR) #for auc
load("~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data/diseaseDatasetInfo.Rda")
source('~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Scripts/Perform Similarity Fusion.R')
source('~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Scripts/Functions for Evaluation.R')
setwd("~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data/Similarity Matrices")
for(file in list.files(pattern="*.Rda")){
load(file)
}
doKernel = ontologicalSimilarity
phenoKernel = phenotypicSimilarity
litKernel = litCoOccurrenceSimilarity
disgeneKernel = geneticSimilarity
transcriptomicKernel = transcriptomicSimilarity
drugKernel = drugSimilarity
# Create fused matrices:
kernelnonDO = createFusedMatrix(inputMatrices = c("phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"))
kernelnonDrug = createFusedMatrix(inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity"))
kernelFull = createFusedMatrix(inputMatrices = c("ontologicalSimilarity","phenotypicSimilarity","litCoOccurrenceSimilarity","geneticSimilarity","transcriptomicSimilarity","drugSimilarity"))
thresh = sort(sapply(randomAvgKernelsFull,function(x) max(x[lower.tri(x)])))[1000]
proportionOfValuesWhichAreSignificant = length(kernelFull[lower.tri(kernelFull)][which(kernelFull[lower.tri(kernelFull)]>thresh)])/length(kernelFull[lower.tri(kernelFull)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificant))
thresh = sort(sapply(randomAvgKernelsFull,function(x) max(x[lower.tri(x)])))[950]
proportionOfValuesWhichAreSignificant = length(kernelFull[lower.tri(kernelFull)][which(kernelFull[lower.tri(kernelFull)]>thresh)])/length(kernelFull[lower.tri(kernelFull)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificant))
thresh = sort(sapply(randomAvgKernelsFull,function(x) max(x[lower.tri(x)])))[990]
proportionOfValuesWhichAreSignificant = length(kernelFull[lower.tri(kernelFull)][which(kernelFull[lower.tri(kernelFull)]>thresh)])/length(kernelFull[lower.tri(kernelFull)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificant))
10/1000
thresh = sort(sapply(randomAvgKernelsFull,function(x) max(x[lower.tri(x)])))[999]
proportionOfValuesWhichAreSignificant = length(kernelFull[lower.tri(kernelFull)][which(kernelFull[lower.tri(kernelFull)]>thresh)])/length(kernelFull[lower.tri(kernelFull)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificant))
thresh = sort(sapply(randomAvgKernelsFull,function(x) max(x[lower.tri(x)])))[990]
proportionOfValuesWhichAreSignificant = length(kernelFull[lower.tri(kernelFull)][which(kernelFull[lower.tri(kernelFull)]>thresh)])/length(kernelFull[lower.tri(kernelFull)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificant))
kernelFullSig = kernelFull
kernelFullSig[which(kernelFullSig<thresh)] <-0
head(getUniqueLinks(doKernelSig))
thresh = sort(sapply(randomAvgKernelsFull,function(x) max(x[lower.tri(x)])))[999]
proportionOfValuesWhichAreSignificant = length(kernelFull[lower.tri(kernelFull)][which(kernelFull[lower.tri(kernelFull)]>thresh)])/length(kernelFull[lower.tri(kernelFull)])
cat(paste0("Proportion of values in the disease map which are above the significance threshold: ",proportionOfValuesWhichAreSignificant))
kernelFullSig = kernelFull
kernelFullSig[which(kernelFullSig<thresh)] <-0
plot(hclust(as.dist(1-kernelFullSig)))
thresholdForSignificance = function(kernel,threshold = proportionOfValuesWhichAreSignificant){
thresh = sort(kernel[lower.tri(kernel)],decreasing = TRUE)[threshold*length(kernel[lower.tri(kernel)])]
kernelbinary = kernel
kernelbinary[kernelbinary<thresh] <- 0
return(kernelbinary)
}
doKernelSig = thresholdForSignificance(doKernel)
phenoKernelSig = thresholdForSignificance(phenoKernel)
litKernelSig = thresholdForSignificance(litKernel)
disgeneKernelSig = thresholdForSignificance(disgeneKernel)
transcriptomicKernelSig = thresholdForSignificance(transcriptomicKernel)
drugKernelSig = thresholdForSignificance(drugKernel)
allKernelsSig = doKernelSig + phenoKernelSig + litKernelSig + disgeneKernelSig + transcriptomicKernelSig + drugKernelSig
any(sapply(1:ncol(kernelFullSig),function(i) any(kernelFullSig[,i][which(!(is.na(kernelFullSig[,i])))]!=0&allKernelsSig[,i][which(!(is.na(allKernelsSig[,i])))]==0)))
```
makeBinaryKernel = function(kernel){
kernelSigBinary = kernel
kernelSigBinary[which(kernelSigBinary!=0)] <- 1
return(kernelSigBinary)
}
allKernelsSigBinary = makeBinaryKernel(doKernelSig) + makeBinaryKernel(phenoKernelSig) + makeBinaryKernel(litKernelSig) + makeBinaryKernel(disgeneKernelSig) + makeBinaryKernel(transcriptomicKernelSig) + makeBinaryKernel(drugKernelSig)
getUniqueLinks = function(kernel){
uniqueLinks = kernel
uniqueLinks = uniqueLinks*0
uniqueLinks[which(allKernelsSigBinary==1&kernel!=0)] <- 1
return(uniqueLinks)
}
cat(paste("Unique links in DO:",length(which(getUniqueLinks(doKernelSig)[lower.tri(getUniqueLinks(doKernelSig))]!=0))))
cat(paste("Unique links in pheno:",length(which(getUniqueLinks(phenoKernelSig)[lower.tri(getUniqueLinks(phenoKernelSig))]!=0))))
cat(paste("Unique links in lit:",length(which(getUniqueLinks(litKernelSig)[lower.tri(getUniqueLinks(litKernelSig))]!=0))))
cat(paste("Unique links in disgene:",length(which(getUniqueLinks(disgeneKernelSig)[lower.tri(getUniqueLinks(disgeneKernelSig))]!=0))))
cat(paste("Unique links in transcriptomic:",length(which(getUniqueLinks(transcriptomicKernelSig)[lower.tri(getUniqueLinks(transcriptomicKernelSig))]!=0))))
cat(paste("Unique links in drug:",length(which(getUniqueLinks(drugKernelSig)[lower.tri(getUniqueLinks(drugKernelSig))]!=0))))
binarygraph  = graph_from_adjacency_matrix(kernelFullSig,mode = "undirected",weighted = TRUE,diag = FALSE)
#The Disease Ontology class of each disease, same as in Evaluation Functions.R
toplevels = c("integumentary system disease","disease of cellular proliferation","disease of cellular proliferation","disease of cellular proliferation","disease of mental health","respiratory system disease","integumentary system disease","immune system disease","nervous system disease","cardiovascular system disease","respiratory system disease","disease of cellular proliferation","integumentary system disease","disease of mental health","nervous system disease","disease of mental health","disease of cellular proliferation","disease of cellular proliferation","nervous system disease","disease of cellular proliferation","disease of cellular proliferation","disease of cellular proliferation","respiratory system disease","disease of cellular proliferation",
"gastrointestinal system disease","genetic disease","disease by infectious agent","cardiovascular system disease","nervous system disease","genetic disease","musculoskeletal system disease","respiratory system disease","disease of cellular proliferation","reproductive system disease","disease of cellular proliferation","disease of cellular proliferation","disease by infectious agent","disease by infectious agent","disease of cellular proliferation","disease by infectious agent","disease of cellular proliferation","nervous system disease","respiratory system disease","disease by infectious agent","syndrome","cardiovascular system disease","cardiovascular system disease","musculoskeletal system disease","immune system disease","musculoskeletal system disease",
"disease of cellular proliferation","disease of mental health","reproductive system disease","disease of cellular proliferation","disease by infectious agent","nervous system disease","cardiovascular system disease","disease of cellular proliferation","disease of metabolism","disease of cellular proliferation","musculoskeletal system disease","musculoskeletal system disease","disease of cellular proliferation","nervous system disease","disease by infectious agent","syndrome","cardiovascular system disease","disease of cellular proliferation","disease of cellular proliferation","disease of cellular proliferation","integumentary system disease","cardiovascular system disease","disease of cellular proliferation","musculoskeletal system disease","integumentary system disease","immune system disease","disease by infectious agent","genetic disease","musculoskeletal system disease","disease of cellular proliferation","disease of cellular proliferation","disease of metabolism","disease of metabolism","gastrointestinal system disease","disease of cellular proliferation")
toplevels = toplevels[-70] #Remove for prostate sarcoma which was taken out
names(toplevels) = diseaseDatasetInfo$disont.name
head(getUniqueLinks(doKernelSig))
View(getUniqueLinks(doKernelSig))
allKernelsSig = doKernelSig + phenoKernelSig + litKernelSig + disgeneKernelSig + transcriptomicKernelSig + drugKernelSig
any(sapply(1:ncol(kernelFullSig),function(i) any(kernelFullSig[,i][which(!(is.na(kernelFullSig[,i])))]!=0&allKernelsSig[,i][which(!(is.na(allKernelsSig[,i])))]==0)))
```
makeBinaryKernel = function(kernel){
kernelSigBinary = kernel
kernelSigBinary[which(kernelSigBinary!=0)] <- 1
return(kernelSigBinary)
}
allKernelsSigBinary = makeBinaryKernel(doKernelSig) + makeBinaryKernel(phenoKernelSig) + makeBinaryKernel(litKernelSig) + makeBinaryKernel(disgeneKernelSig) + makeBinaryKernel(transcriptomicKernelSig) + makeBinaryKernel(drugKernelSig)
getUniqueLinks = function(kernel){
uniqueLinks = kernel
uniqueLinks = uniqueLinks*0
uniqueLinks[which(allKernelsSigBinary==1&kernel!=0)] <- 1
return(uniqueLinks)
}
cat(paste("Unique links in DO:",length(which(getUniqueLinks(doKernelSig)[lower.tri(getUniqueLinks(doKernelSig))]!=0))))
cat(paste("Unique links in pheno:",length(which(getUniqueLinks(phenoKernelSig)[lower.tri(getUniqueLinks(phenoKernelSig))]!=0))))
cat(paste("Unique links in lit:",length(which(getUniqueLinks(litKernelSig)[lower.tri(getUniqueLinks(litKernelSig))]!=0))))
cat(paste("Unique links in disgene:",length(which(getUniqueLinks(disgeneKernelSig)[lower.tri(getUniqueLinks(disgeneKernelSig))]!=0))))
cat(paste("Unique links in transcriptomic:",length(which(getUniqueLinks(transcriptomicKernelSig)[lower.tri(getUniqueLinks(transcriptomicKernelSig))]!=0))))
cat(paste("Unique links in drug:",length(which(getUniqueLinks(drugKernelSig)[lower.tri(getUniqueLinks(drugKernelSig))]!=0))))
cat(paste("Proportion of links in the (non-DO) disease map which are in different top-level classes: ",(length(findLinks(kernelnonDO,novel = TRUE,threshold = 1-significantProportion)))/(length(findLinks(kernelnonDO,novel = FALSE,threshold = 1-significantProportion)))))
cat(paste("Proportion of links in the (non-DO) disease map which are in different top-level classes: ",(length(findLinks(kernelnonDO,novel = TRUE,threshold = 1-proportionOfValuesWhichAreSignificant)))/(length(findLinks(kernelnonDO,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)))))
cat(paste("Proportion of links in the full disease map which are in different top-level classes: ",(length(findLinks(kernelFull,novel = TRUE,threshold = 1-proportionOfValuesWhichAreSignificant)))/(length(findLinks(kernelFull,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)))))
cat(paste("Proportion of links in the significant disease map which are in different top-level classes: ",(length(findLinks(kernelFullSig,novel = TRUE,threshold = 1-proportionOfValuesWhichAreSignificant)))/(length(findLinks(kernelFullSig,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)))))
cat(paste("Proportion of links in the full disease map which are in different top-level classes: ",(length(findLinks(kernelFull,novel = TRUE,threshold = 0)))/(length(findLinks(kernelFull,novel = FALSE,threshold = 0)))))
binarize(kernelFull,proportionOfValuesWhichAreSignificant)[lower.tri(binarize(kernelFull,proportionOfValuesWhichAreSignificant))]==kernelFullSig[lower.tri(kernelFullSig)]
binarize(kernelFull,1-proportionOfValuesWhichAreSignificant)[lower.tri(binarize(kernelFull,proportionOfValuesWhichAreSignificant))]==kernelFullSig[lower.tri(kernelFullSig)]
which(!(binarize(kernelFull,1-proportionOfValuesWhichAreSignificant)[lower.tri(binarize(kernelFull,proportionOfValuesWhichAreSignificant))]==kernelFullSig[lower.tri(kernelFullSig)]))
which(!(binarize(kernelFull,1-proportionOfValuesWhichAreSignificant)[lower.tri(binarize(kernelFull,proportionOfValuesWhichAreSignificant))][==kernelFullSig[lower.tri(kernelFullSig)]))]2475]
which(!(binarize(kernelFull,1-proportionOfValuesWhichAreSignificant)[lower.tri(binarize(kernelFull,proportionOfValuesWhichAreSignificant))][2475]
binarize(kernelFull,1-proportionOfValuesWhichAreSignificant)[lower.tri(binarize(kernelFull,proportionOfValuesWhichAreSignificant))][2475]
kernelFullSig = thresholdForSignificance(kernelFull)
plot(hclust(as.dist(1-kernelFullSig)))
kernel = kernelFull
threshold = proportionOfValuesWhichAreSignificant
sort(kernel[lower.tri(kernel)],decreasing = TRUE)
threshold*length(kernel[lower.tri(kernel)])
242/length(kernel[lower.tri(kernel)])
sort(kernel[lower.tri(kernel)],decreasing = TRUE)[threshold*length(kernel[lower.tri(kernel)])]
any(sapply(1:ncol(kernelFullSig),function(i) any(kernelFullSig[,i][which(!(is.na(kernelFullSig[,i])))]!=0&allKernelsSig[,i][which(!(is.na(allKernelsSig[,i])))]==0)))
cat(paste("Proportion of links in the (non-DO) disease map which are in different top-level classes: ",(length(findLinks(kernelnonDO,novel = TRUE,threshold = 1-proportionOfValuesWhichAreSignificant)))/(length(findLinks(kernelnonDO,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)))))
cat(paste("Proportion of links in the full disease map which are in different top-level classes: ",(length(findLinks(kernelFull,novel = TRUE,threshold = 0)))/(length(findLinks(kernelFull,novel = FALSE,threshold = 0)))))
cat(paste("Proportion of links in the significant disease map which are in different top-level classes: ",(length(findLinks(kernelFullSig,novel = TRUE,threshold = 1-proportionOfValuesWhichAreSignificant)))/(length(findLinks(kernelFullSig,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)))))
source('~/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Scripts/Perform Similarity Fusion.R')
cat(paste("Proportion of links in the full disease map which are in different top-level classes: ",(length(findLinks(kernelFull,novel = TRUE,threshold = 0)))/(length(findLinks(kernelFull,novel = FALSE,threshold = 0)))))
sort(doKernel)[0]
thresh  = sort(doKernel)[0]
cat(paste("Proportion of links in the full disease map which are in different top-level classes: ",(length(findLinks(kernelFull,novel = TRUE,threshold = 0)))/(length(findLinks(kernelFull,novel = FALSE,threshold = 0)))))
cat(paste("Proportion of links in the (non-DO) disease map which are in different top-level classes: ",(length(findLinks(kernelnonDO,novel = TRUE,threshold = 1-proportionOfValuesWhichAreSignificant)))/(length(findLinks(kernelnonDO,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)))))
cat(paste("Proportion of links in the significant disease map which are in different top-level classes: ",(length(findLinks(kernelFullSig,novel = TRUE,threshold = 1-proportionOfValuesWhichAreSignificant)))/(length(findLinks(kernelFullSig,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)))))
cat(paste("Proportion of links in the significant disease map which are in different top-level classes: ",(length(findLinks(kernelFullSig,novel = TRUE,threshold = 0)))/(length(findLinks(kernelFullSig,novel = FALSE,threshold = 0)))))
cat(paste("Proportion of links in the significant disease map which are in different top-level classes: ",(length(findLinks(kernelFull,novel = TRUE,threshold = 1-proportionOfValuesWhichAreSignificant)))/(length(findLinks(kernelFull,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant))))) #This is equivalent to using kernelFullSig
cat(paste("Proportion of links in the significant disease map which are in different top-level classes: ",(length(findLinks(kernelFullSig,novel = TRUE,threshold = 0)))/(length(findLinks(kernelFullSig,novel = FALSE,threshold = 0)))))
cat(paste("Proportion of links in the significant disease map which are in different top-level classes: ",(length(findLinks(kernelFull,novel = TRUE,threshold = 1-proportionOfValuesWhichAreSignificant,level = "lower")))/(length(findLinks(kernelFull,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant))))) #This is equivalent to using kernelFullSig
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data/shareApprovedAndPhaseThreeDrugs.Rda")
load("/Users/eo297/OneDrive - University Of Cambridge/PhD/D Disease Map Submission/Project Folder/Data/shareApprovedDrugs.Rda")
druglinksApprovedAndPhaseThree = getDrugLinks(shareApprovedAndPhaseThreeDrugs)
getDrugLinks = function(sharedDrugs){
drugpairs = unname(which(sharedDrugs !=0, arr.ind = T))
for (k in 1:nrow(drugpairs)){
drugpairs[k,] = sort(drugpairs[k,])
}
drugpairs = drugpairs[!duplicated(drugpairs),]
druglinks = vector("numeric",0)
for(drugpair in 1:nrow(drugpairs)){ #for each linked disease
k = drugpairs[drugpair,1]
l = drugpairs[drugpair,2]
druglinks[length(druglinks)+1] <- paste(rownames(sharedDrugs)[k],rownames(sharedDrugs)[l],sep = ", ")
}
return(druglinks)
}
druglinksApprovedAndPhaseThree = getDrugLinks(shareApprovedAndPhaseThreeDrugs)
druglinksApproved = getDrugLinks(shareApprovedDrugs)
getProportionThatShareDrugs = function(druglinks){
nonnovelLinksDO = findLinks(doKernel,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)
nonnovelLinksPheno = findLinks(phenoKernel,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)
nonnovelLinksLit = findLinks(litKernel,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)
nonnovelLinksDisgene = findLinks(disgeneKernel,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)
nonnovelLinksTranscriptomic = findLinks(transcriptomicKernel,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)
nonnovelLinksDrug = findLinks(drugKernel,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)
nonnovelLinksFull = findLinks(kernelFull,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)
nonnovelLinksNonDO = findLinks(kernelnonDO,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)
nonnovelLinksNonDrug = findLinks(kernelnonDrug,novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)
nonNovelLinks = list(nonnovelLinksDO,nonnovelLinksPheno,nonnovelLinksLit,nonnovelLinksDisgene,nonnovelLinksTranscriptomic,nonnovelLinksDrug,nonnovelLinksNonDO,nonnovelLinksNonDrug,nonnovelLinksFull)
numberOfNonNovelLinks = sapply(nonNovelLinks,length)
proportionWhichAreDrugsnonNovel = sapply(nonNovelLinks,function(x) length(which(x%in%druglinks)))/numberOfNonNovelLinks
nonnovelLinksDrugSharingPerm = vector("numeric",length(randomAvgKernelsFull[1:100]))
for(i in 1:length(randomAvgKernelsFull[1:100])){
temp = findLinks(randomAvgKernelsFull[[i]],novel = FALSE,threshold = 1-proportionOfValuesWhichAreSignificant)
nonnovelLinksDrugSharingPerm[[i]] = length(which(temp%in%druglinks))/length(temp)
}
proportionWhichAreDrugsnonNovelWithRandom = c(mean(nonnovelLinksDrugSharingPerm),proportionWhichAreDrugsnonNovel)
writeLines(c(paste("Mean proportion all links drug sharing, random kernels:",round(proportionWhichAreDrugsnonNovelWithRandom[1],3)),
paste("Mean proportion all links drug sharing, DO-Transcriptomic kernels (5 individual kernels):",round(mean(proportionWhichAreDrugsnonNovel[1:5]),3)),
paste("Mean proportion all links drug sharing, 6 individual kernels:",round(mean(proportionWhichAreDrugsnonNovel[1:6]),3)),
paste("Mean proportion all links drug sharing, kernel created from 5 spaces):",round(proportionWhichAreDrugsnonNovel[8],3)),
paste("Mean proportion all links drug sharing, full kernel:",round(proportionWhichAreDrugsnonNovel[9],3))))
#PLOT:
x = c("Random","Ontology","Phenotype","Literature","Genetic","Expression","Drug","NonDO","NonDrug","Full")
y = proportionWhichAreDrugsnonNovelWithRandom
#y1 = proportionWhichAreDrugsWithRandom
#data = data.frame(x,y,y1)
data = data.frame(x,y)
#The default order will be alphabetized unless specified as below:
data$x <- factor(data$x, levels = data[["x"]])
plot_ly(data,x = ~x, y = ~y, type = 'bar', name = 'Proportion of all links which share drugs', marker = list(color = 'rgb(31, 119, 180)')) %>%
#add_trace(x = ~x, y = ~y1, type = 'bar', name = 'Proportion of novel links which share drugs', marker = list(color = 'turquoise')) %>%
layout(font = t,
xaxis = list(title = "", tickangle = -0),
yaxis = list(title = ""),
margin = list(b = 100),
barmode = 'group')
}
getProportionThatShareDrugs(druglinksApprovedAndPhaseThree)
getProportionThatShareDrugs(druglinksApproved)
